// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = 'https://hhcoeuedfeoudgxtttgn.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhoY29ldWVkZmVvdWRneHR0dGduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4NDU4NDYsImV4cCI6MjA2MjQyMTg0Nn0.3MPbiHpdddcJipa-UxMaTBN8MfRBP1Bw_WiVX76Xt_w';

console.log('=== SUPABASE CLIENT INITIALIZATION ===');
console.log('Environment check:', {
  hasUrl: !!SUPABASE_URL,
  hasKey: !!SUPABASE_ANON_KEY,
  url: SUPABASE_URL ? `${SUPABASE_URL.substring(0, 30)}...` : 'undefined',
  key: SUPABASE_ANON_KEY ? `${SUPABASE_ANON_KEY.substring(0, 30)}...` : 'undefined'
});

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Missing Supabase environment variables:', {
    SUPABASE_URL: SUPABASE_URL ? 'SET' : 'MISSING',
    SUPABASE_ANON_KEY: SUPABASE_ANON_KEY ? 'SET' : 'MISSING'
  });
  
  throw new Error(
    'Missing Supabase environment variables. Please check your deployment configuration.'
  );
}

console.log('‚úÖ Supabase environment variables loaded successfully');

// Check if this is a page refresh or initial load
const isPageRefresh = window.performance && 
                     ((window.performance.navigation && window.performance.navigation.type === 1) || 
                      document.referrer.includes(window.location.host));

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: {
      getItem: (key) => {
        try {
          const value = localStorage.getItem(key);
          console.log(`üîë [Supabase] Auth storage getItem: ${key.substring(0, 20)}...`);
          return value;
        } catch (error) {
          console.error(`‚ùå [Supabase] Auth storage getItem error for ${key}:`, error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, value);
          console.log(`üíæ [Supabase] Auth storage setItem: ${key.substring(0, 20)}...`);
        } catch (error) {
          console.error(`‚ùå [Supabase] Auth storage setItem error for ${key}:`, error);
        }
      },
      removeItem: (key) => {
        try {
          localStorage.removeItem(key);
          console.log(`üßπ [Supabase] Auth storage removeItem: ${key.substring(0, 20)}...`);
        } catch (error) {
          console.error(`‚ùå [Supabase] Auth storage removeItem error for ${key}:`, error);
        }
      }
    }
  },
  db: {
    schema: 'public',
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web',
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced connection test with better error handling
let connectionTestAttempts = 0;
const maxConnectionAttempts = 3;

const testConnection = async () => {
  connectionTestAttempts++;
  console.log(`üîÑ Testing Supabase connection (attempt ${connectionTestAttempts}/${maxConnectionAttempts})`);
  
  try {
    // Test with a simple, fast query that should always work
    const { error } = await supabase
      .from('user_profiles')
      .select('id')
      .limit(1)
      .maybeSingle();
    
    if (error) {
      console.error(`‚ùå Connection test failed (attempt ${connectionTestAttempts}):`, error);
      
      // Check for specific error types
      if (error.message?.includes('404') || error.message?.includes('Not Found')) {
        console.error('‚ùå 404 Error detected - this suggests the Supabase URL or table structure is incorrect');
      }
      
      if (connectionTestAttempts < maxConnectionAttempts) {
        console.log(`‚è≥ Retrying connection test in 2 seconds...`);
        setTimeout(testConnection, 2000);
        return;
      } else {
        console.error('‚ùå All connection attempts failed');
        return;
      }
    }
    
    console.log('‚úÖ Supabase connection test successful');
    console.log('üìä Database accessible, user_profiles table exists');
    
    // Test auth state
    try {
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      if (authError) {
        console.warn('‚ö†Ô∏è Auth session check failed:', authError.message);
      } else {
        console.log('‚úÖ Auth system accessible, session:', session ? 'active' : 'none');
      }
    } catch (authErr) {
      console.warn('‚ö†Ô∏è Auth test failed:', authErr);
    }
    
  } catch (error) {
    console.error(`‚ùå Connection test error (attempt ${connectionTestAttempts}):`, error);
    
    if (connectionTestAttempts < maxConnectionAttempts) {
      console.log(`‚è≥ Retrying connection test in 2 seconds...`);
      setTimeout(testConnection, 2000);
    } else {
      console.error('‚ùå All connection attempts failed');
    }
  }
};

// Start connection test
testConnection();

// Note: Service role client is not needed for this implementation
export const supabaseServiceRole = null;